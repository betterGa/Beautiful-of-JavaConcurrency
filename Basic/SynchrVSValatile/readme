1、synchronized 关键字
    synchronized 块 是 Java 提供的一种 原子性 内置锁，
    Java 中的每个对象 都可以把它当作一个同步锁来使用，
    这种 Java 内置的 使用者看不到的锁 被称为 内部锁，也叫做监视器锁。
    线程的执行代码 在 进入 synchronized 代码块前 会自动获取内部锁，这
    时 其他线程访问该同步代码块 就会被阻塞挂起。
    拿到 内部锁 的线程 会在正常退出同步代码块 或 抛出异常后 或者
    在同步块内调用了 该内置锁资源的 wait 系列方法时 释放该内置锁。

    内置锁是排他锁，也就是说，当一个线程获取这个锁后，
    其他线程必须等待该线程释放锁后，才能获取该锁。

    另外，由于 Java 中的线程是与 操作系统 的 原生线程 一一对应的，
    所以当阻塞一个线程时，需要从用户态 切换到 内核态 执行阻塞操作，
    这很耗时，而 synchronized 的使用就会导致上下文切换。


    - synchronized 的内存语义
         进入 synchronized 块的内存语义是 把在 synchronzed 块内使用到的变量
      从线程的工作内存 中清除， 这样在 synchronized 块内使用到该变量时
      就不会从线程的工作内存中获取，而是直接从主内存中获取。
         退出 synchronized块 是对共享变量的修改刷新到主内存。
         其实这也是加锁和释放锁的语义，
      当获取锁后，会清空锁块内 本地内存 中将会被用到的共享变量，
      在使用这些变量时从主内存进行加载，在释放锁时将本地内存中修改的共享变量刷新到主内存。
         除可以解决 共享变量内存可见性问题外， synchronized 经常被用来实现原子性操作。

        - 从 JVM 的层面讲 synchronized
           多线程的线程同步机制是靠“锁”🔒 控制的 。
           在 Java 程序运行环境中，JVM 需要对两类 线程共享的数据进行协调：
            （1）保存在堆中的实例变量；
            （2）保存在方法中的类变量；
            在线程中，每个 类 和 对象 在逻辑上都是与一个监视器相关联的，
          对于对象来说，相关联的监视器保护的是对象的实例变量，而类的监视器保护的是类的类变量。
          如果对象无实例变量，类无类变量，监视器就神马也不监视。

          类锁实际上是用对象锁来实现的，在 JVM 装载一个 class 文件时，
          它就会创建一个 java.lang.Class 类的实例，当锁住一个类时，
          实际上锁住的是那个类的Class类对象。

            Java 不需要开发人员手动加锁，对象锁是 JVM 内部使用的，
          只需使用 synchronized 块或 synchronized 方法，就可标志一个监视区域，
            每当进入一个监视区域时 JVM 都会自动锁上对象或类。

          synchronized 关键字经过编译之后，
          会在同步块的前后形成 monitorenter 和 monitoreexit 这两个字节码指令，
          这两个字节码都需要一个 reference 类型的参数来指明要锁定 和 解锁对象，
          如果 Java 程序中的 synchronized 明确指定了 对象参数，
          那就是这个对象的 reference，
          如果没有明确指定 ，那就根据 synchronized 修饰的是实例方法还是类方法，
          去取对应的对象实例或 Class 对象来作为锁对象。
          在执行 monitorenter 时，首先尝试获取对象的锁，
          如果这个对象没被锁定，或者当前线程已经拥有了该对象的锁，把锁的计数器加 1 ，
          在执行 monitorexit 时，会把锁的计数器减 1，当计数器为 0 时，锁会被释放。



2、volatile 关键字
       锁太笨重，因为会带来线程上下文的切换开销，对于解决 内存可见性的问题，
       Java 还提供了一种 弱形式 的同步，就是使用 volatile 关键字。
       该关键字可以保证 对一个变量的更新 对其他线程 马上可见。
       当一个变量被声明为 volatile 时，线程在 写 入变量时不会把值缓存在寄存器或者其他地方，
     而是会把值刷新回主内存。
       当其他线程 读 取该共享变量时，会从主内存重新获取最新值，而不是使用当前线程的工作内存中的值。
（当线程写入了 volatile 变量值时就等价于线程退出 synchronized 同步块，读取 volatile 变量值就相当于进入同步块。）