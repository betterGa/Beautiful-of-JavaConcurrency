ReentrantLock
   底层是使用 AQS 实现的可重入独占锁。AQS 状态值为 0 表示当前锁空闲，
   大于等于 1 说明该锁已经被占用。
   该锁内部有公平锁 和 非公平锁，默认情况下是 非公平的实现。
   而且该锁是独占锁，所以，某时只有一个线程可以获取该锁。

    子类 Sync 类继承自 AQS，
    它的子类 NonfairSync 和 FairSync 分别实现了获取锁的 非公平 与 公平策略。
    在这里，AQS 的 state 状态值表示线程获取该锁的可重入次数，
    在默认情况下，state 的值为 0 表示 当前锁没有被任何线程持有。
    当一个线程 第一次获取该锁时，会尝试使用 CAS 设置 state 的值为 1，
    如果 CAS 成功，则当前线程获取了该锁，然后记录该锁的持有者为当前线程。
    在该线程没有释放锁的情况下，第二次获取该锁后，状态值 +1，
    这就是可重入次数。
    在该线程释放该锁时，会尝试使用 CAS 让状态值 -1，如果 -1 后状态值为 0，
    则当前线程释放该锁。

    公平的 tryAcquire 与 非公平的类似，
    不同之处在于，在设置 CAS 之前，多了 hasQueuedPredecessors() 方法。